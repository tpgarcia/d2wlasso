out.rownames <- rownames(microbes)
#print("here")
# compute correlation and partial correlation (for taking into account z) between x and y
cor.out <- correlations(factor.z,microbes,phenotypes,partial=FALSE,ttest=ttest,format.data=FALSE,reg.type=reg.type)
parcor.out <- correlations(factor.z,microbes,phenotypes,partial=TRUE,ttest=ttest,format.data=FALSE,reg.type=reg.type)
fstat.out <- ftests(factor.z,microbes)
#print(cor.out)
#####################
## Get Weights: t-statistic, p-values, Benjamin-Hochberg p-values, q-values, partial correlations ##
#####################
## t-values with \beta_k in y=diet + \beta_k * microbe_k
weight.tvalue <- parcor.out$tvalues
#out.tvalue[,j] <- parcor.out$tvalues
## p-values with \beta_k in y=diet + \beta_k * microbe_k
weight.pvalue.noadj <- parcor.out$pvalues
#out.pvalue.noadj[,j] <- parcor.out$pvalues
## Benjamini-Hochberg adjusted p-values from y=diet + \beta_k * microbe_k
benhoch.results <- ben.hoch.interest(parcor.out$pvalues,alpha=alpha)
weight.pvalue.benhoch <- benhoch.results$pval.adjust
#out.pvalue.benhoch[,j] <- benhoch.results$pval.adjust
## partial correlations
weight.parcor <- parcor.out$estimate
#out.parcor.value[,j] <- parcor.out$estimate
## Results for testing if a microbe has an effect on phenotype, but NOT
##            accounting for diet
## That is, we test : H_0 : \beta_{x_j}=0
microbe.cor.out.qvalues <- q.computations(cor.out, method=q_method,
plots=plots,file="cor",robust=robust,q.old=q.old,
pi0.true=pi0.true,pi0.val=pi0.val)
microbe.cor.out <- q.interest(microbe.cor.out.qvalues$qval.mat,alpha=alpha,criteria="less")
out.cor   <- c(0,t(microbe.cor.out$interest))
## Results from Benjamini-Hochberg adjusted p-values when p-values do not account for diet
benhoch.cor.results <- ben.hoch.interest(cor.out$pvalues,alpha=alpha.bh)
out.benhoch.cor <- c(0,t(benhoch.cor.results$interest))
## Results for testing if a microbe has an effect on phenotype, but AFTER
##            accounting for diet
## That is, we test : H_0 : \beta_{x_j|z}=0
# compute q-value as used by JD Storey with some adjustments made
microbe.parcor.out.qvalues <- q.computations(parcor.out,method=q_method,
plots=plots,file="parcor",robust=robust,q.old=q.old,
pi0.true=pi0.true,pi0.val=pi0.val)
out.qvalue <- c(0,t(microbe.parcor.out.qvalues$qval.mat))
out.pvalue <- c(0,t(parcor.out$pvalues))
q.out <- q.interest(microbe.parcor.out.qvalues$qval.mat,alpha=alpha,criteria="less")
out.parcor <- c(1,t(q.out$interest))
## Results for Benjamini-Hochberg Method ##
benhoch.results <- ben.hoch.interest(parcor.out$pvalues,alpha=alpha.bh)
out.benhoch <- c(1,t(benhoch.results$interest))
out.benhoch.pval.adjust <- c(0,t(benhoch.results$pval.adjust))
## Results for Cox with Exclusion-frequency weights ##
out.aic.boot <- NULL; out.bic.boot <- NULL#; out.fixed.aic.boot <- NULL; out.fixed.bic.boot <- NULL
out.kmeans.aic.boot <- NULL; out.kmeans.bic.boot <- NULL; out.kquart.aic.boot <- NULL; out.kquart.bic.boot <- NULL
out.sort.aic.boot <- NULL; out.sort.bic.boot <- NULL
w.aic.boot <- NULL; w.bic.boot <- NULL#; w.fixed.aic.boot <- NULL; w.fixed.bic.boot <- NULL
w.kmeans.aic.boot <- NULL; w.kmeans.bic.boot <- NULL; w.kquart.aic.boot <- NULL; w.kquart.bic.boot <- NULL
w.sort.aic.boot <- NULL; w.sort.bic.boot <- NULL
if (wt == "one"){
## No weights
weights <- matrix(1,nrow=nrow(microbes)-1,ncol=nrow(phenotypes))
} else if (wt == "t_val"){
weights <- weight.tvalue
} else if (wt == "parcor"){
weights <- weight.parcor
} else if (wt == "p_val"){
weights <- weight.pvalue.noadj
} else if (wt == "bhp_val"){
weights <- weight.pvalue.benhoch
} else if (wt == "adapt"){
## Weights set to absolute value of partial correlations
weights <- parcor.out$estimate
} else if (wt == "q_cor"){
## Weights set to q-values BEFORE taking into account diet
weights <- microbe.cor.out.qvalues$qval.mat
} else {
## Weights set to q-values after taking into account diet
weights <- microbe.parcor.out.qvalues$qval.mat
}
## Weight functions
g1 <- function(x){
return(x)
}
g2 <- function(x){
return(sqrt(x))
}
g3 <- function(x){
return(1/abs(x))
}
g4 <- function(x){
return(x^2)
}
if (weight_fn=="sqrt"){
g <- g2
} else if (weight_fn=="inverse_abs"){
g <- g3
} else if (weight_fn=="square"){
g <- g4
} else {
g <- g1
}
out.w <- as.data.frame(matrix(0,nrow=out.nrow,ncol=1,
dimnames = list(out.rownames,paste("w.delta.",delta,sep=""))))
if ((wt == "t_val")||(wt == "parcor")||(wt == "adapt")){
lasso.w <- lasso.computations(weights,microbes,phenotypes,g3,plots=plots,file="weight_",
include.diet=include.z,diet.wt=z.wt,corr.g=TRUE,
delta=delta)
} else {
lasso.w <- lasso.computations(weights,microbes,phenotypes,g,plots=plots,file="weight_",
include.diet=include.z,diet.wt=z.wt,thresh.q=thresh.q,
delta=delta)
}
out.w <- as.matrix(lasso.w$interest)
## mult.cv.delta.out.w5 : stores results from weighted lasso when weights are set to q-values AFTER taking into account diet,
##           and weight function g1
nsimu = 1; j = 1
mult.cv.delta.out.w5 <- as.data.frame(matrix(0,nrow=out.nrow,ncol=nsimu,
dimnames = list(out.rownames,paste("w5.mult.nsimu.",seq(1,nsimu),sep=""))))
mult.delta.w5 <- as.data.frame(matrix(0, nrow = 1, ncol = ncv,
dimnames = list("delta", seq(1,ncv))))
## mult.cv.delta.out.w6 : stores results from weighted lasso when weights absolute value of partial correlations,
##           and weight function g3
mult.cv.delta.out.w6 <- as.data.frame(matrix(0,nrow=out.nrow,ncol=nsimu,
dimnames = list(out.rownames,paste("w6.mult.nsimu.",seq(1,nsimu),sep=""))))
mult.delta.w6 <- as.data.frame(matrix(0, nrow = 1, ncol = ncv,
dimnames = list("delta", seq(1,ncv))))
if(lasso.delta.cv.mult==TRUE){
include.diet <- TRUE
## Weights set to q-values after taking into account diet
weights <- microbe.parcor.out.qvalues$qval.mat
if (!is.null(delta.cv.seed)){
set.seed(delta.cv.seed)
}
for(v in 1:ncv){
mult.cv.delta.lasso.w5 <- lasso.computations(weights,microbes,phenotypes,g,plots=FALSE,file="weight5_",
include.diet=include.diet,diet.wt=z.wt,thresh.q=thresh.q,delta=delta,
cv.criterion=FALSE,vfold=vfold)
mult.cv.delta.out.w5[,j] <- mult.cv.delta.out.w5[,j] + as.matrix(mult.cv.delta.lasso.w5$interest)
mult.delta.w5[,v] <- mult.delta.w5[,v] + mult.cv.delta.lasso.w5$delta.out
}
## Weights set to absolute value of partial correlations
weights <- parcor.out$estimate
if (!is.null(delta.cv.seed)){
set.seed(delta.cv.seed)
}
for(v in 1:ncv){
mult.cv.delta.lasso.w6 <- lasso.computations(weights,microbes,phenotypes,g3,plots=FALSE,file="weight6_",
include.diet=include.diet,diet.wt=z.wt,corr.g=TRUE,delta=delta,
cv.criterion=FALSE,vfold=vfold)
mult.cv.delta.out.w6[,j] <- mult.cv.delta.out.w6[,j] + as.matrix(mult.cv.delta.lasso.w6$interest)
mult.delta.w6[,v] <- mult.delta.w6[,v] + mult.cv.delta.lasso.w6$delta.out
}
}
## exclusion frequency weights
if (reg.type=="cox"){
## Store weights for each bootstrap
tmp2.store <- as.data.frame(matrix(0, nrow = (out.nrow-1), ncol = nboot,
dimnames = list(out.rownames[-1],
seq(1,nboot))))
weight.aic.boot <- tmp2.store
weight.bic.boot <- tmp2.store
weight.fixed.aic.boot <- tmp2.store
weight.fixed.bic.boot <- tmp2.store
weight.kmeans.aic.boot <- tmp2.store
weight.kmeans.bic.boot <- tmp2.store
weight.kquart.aic.boot <- tmp2.store
weight.kquart.bic.boot <- tmp2.store
weight.sort.aic.boot <- tmp2.store
weight.sort.bic.boot <- tmp2.store
if(run.kmeans.aic.bic==TRUE | run.kquart.aic.bic==TRUE |  run.sort.aic.bic==TRUE){
## Get parameter estimates from ridge regression
beta.values <- ridge.regression(microbes,phenotypes)
if(run.kmeans.aic.bic==TRUE){
## K-means clustering
kmeans.out <- kmeans(beta.values,centers=k.split,iter.max=100)
index.group.kmeans <- kmeans.out$cluster
}
if(run.kquart.aic.bic==TRUE){
## K-quart clustering
index.group.kquart <- cut(beta.values, breaks=quantile(beta.values,
probs=seq(0,1, by=1/k.split)),include.lowest=TRUE)
index.group.kquart <- as.numeric(factor(index.group.kquart, labels=1:k.split))
}
if(run.sort.aic.bic==TRUE){
## K-sort clustering
beta.sort <- sort(abs(beta.values),decreasing=TRUE,index.return=TRUE)
sort.beta.index <- beta.sort$ix
## index of ordering
index.group.sort <- index.sort.partition(n=ncol(microbes),k=k,sort.beta.index)
}
}
for(b in 1:nboot){
##print(b)
if(run.aic.bic==TRUE){
## Randomly partition the index
rand.index <- random.partition(n=ncol(microbes),p=nrow(microbes)-1,k=k)
}
#if(run.fixed.aic.bic==TRUE){
## Ensure fixed covariates are in the partition + randomly partition the rest
#    rand.fixed.index <- fixed.plus.random.partition(fixed.covariates,n=ncol(microbes),p=nrow(microbes)-1,k=k)
#}
if(run.kmeans.aic.bic==TRUE){
## Partition the index using k-means
kmeans.rand.index <- designed.partition(index.group.kmeans,k=k)
}
if(run.kquart.aic.bic==TRUE){
## Partition the index using k-quartile
kquart.rand.index <- designed.partition(index.group.kquart,k=k)
}
if(run.sort.aic.bic==TRUE){
## Partition the index using k-quartile
sort.rand.index <- designed.partition(index.group.sort,k=k)
## Measures how often the largest beta from ridge regression is in the true,
##  non-zero beta coefficients
#beta.index.sort[sort.beta.index[1]+1,j] <- as.numeric(sort.beta.index[1]%in%fixed.covariates)
}
## Apply stepwise AIC to each group
for(l in 1:k){
##print(l)
if(run.aic.bic==TRUE){
## Random partitioning
index <- as.numeric(unlist(rand.index[l]))
if(length(index)!=0){
if(run.aic==TRUE){
weight.aic.boot[,b] <- weight.aic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,type="AIC",
direction=direction,
real_data=real_data)
}
if(run.bic==TRUE){
weight.bic.boot[,b] <- weight.bic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,type="BIC",
direction=direction,
real_data=real_data)
}
}
}
if (FALSE){
if(run.fixed.aic.bic==TRUE){
## Fixed + Random partitioning
index <- as.numeric(unlist(rand.fixed.index[l]))
if(length(index)!=0){
if(run.aic==TRUE){
weight.fixed.aic.boot[,b] <- weight.fixed.aic.boot[,b] +
step.selection(factor.z,index,
microbes,phenotypes,type="AIC",
direction=direction,
real_data=real_data)
}
if(run.bic==TRUE){
weight.fixed.bic.boot[,b] <- weight.fixed.bic.boot[,b] + step.selection(factor.z,index,
microbes,phenotypes,type="BIC",
direction=direction,
real_data=real_data)
}
}
}
}
if(run.kmeans.aic.bic==TRUE){
## k-means partitioning
index <- as.numeric(unlist(kmeans.rand.index[l]))
if(length(index)!=0){
if(run.aic==TRUE){
weight.kmeans.aic.boot[,b] <- weight.kmeans.aic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="AIC",
direction=direction,
real_data=real_data)
}
if(run.bic==TRUE){
weight.kmeans.bic.boot[,b] <- weight.kmeans.bic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="BIC",
direction=direction,
real_data=real_data)
}
}
}
if(run.kquart.aic.bic==TRUE){
## k-quartile partitioning
index <- as.numeric(unlist(kquart.rand.index[l]))
if(length(index)!=0){
if(run.aic==TRUE){
weight.kquart.aic.boot[,b] <- weight.kquart.aic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="AIC",
direction=direction,
real_data=real_data)
}
if(run.bic==TRUE){
weight.kquart.bic.boot[,b] <- weight.kquart.bic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="BIC",
direction=direction,
real_data=real_data)
}
}
}
if(run.sort.aic.bic==TRUE){
## sorted partitioning
index <- as.numeric(unlist(sort.rand.index[l]))
if(length(index)!=0){
if(run.aic==TRUE){
weight.sort.aic.boot[,b] <- weight.sort.aic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="AIC",
direction=direction,
real_data=real_data)
}
if(run.bic==TRUE){
weight.sort.bic.boot[,b] <- weight.sort.bic.boot[,b] +
step.selection(factor.z,index,microbes,phenotypes,
type="BIC",
direction=direction,
real_data=real_data)
}
}
}
}
}
if(run.aic.bic==TRUE){
out.aic.boot <- apply(weight.aic.boot,1,sum)/nboot
out.bic.boot <- apply(weight.bic.boot,1,sum)/nboot
}
#if(run.fixed.aic.bic==TRUE){
#    out.fixed.aic.boot <- apply(weight.fixed.aic.boot,1,sum)/nboot
#    out.fixed.bic.boot <- apply(weight.fixed.bic.boot,1,sum)/nboot
#}
if(run.kmeans.aic.bic==TRUE){
out.kmeans.aic.boot <- apply(weight.kmeans.aic.boot,1,sum)/nboot
out.kmeans.bic.boot <- apply(weight.kmeans.bic.boot,1,sum)/nboot
}
if(run.kquart.aic.bic==TRUE){
out.kquart.aic.boot <- apply(weight.kquart.aic.boot,1,sum)/nboot
out.kquart.bic.boot <- apply(weight.kquart.bic.boot,1,sum)/nboot
}
if(run.sort.aic.bic==TRUE){
out.sort.aic.boot <- apply(weight.sort.aic.boot,1,sum)/nboot
out.sort.bic.boot <- apply(weight.sort.bic.boot,1,sum)/nboot
}
# Lasso fitting with exclusion frequency weights
if(run.aic.bic==TRUE){
## weights are exclusion frequency (random partitioning)
#if(run.aic==TRUE){
weights <- data.frame(out.aic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.aic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_aic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.aic.boot <- lasso.aic.bvalue$interest
#}
#if(run.bic==TRUE){
weights <- data.frame(out.bic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.bic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_bic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.bic.boot <- lasso.bic.bvalue$interest
#}
}
if(run.kmeans.aic.bic==TRUE){
## weights are exclusion frequency (designed partitioning-kmeans)
#if(run.aic==TRUE){
weights <- data.frame(out.kmeans.aic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.kmeans.aic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_kmeans_aic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.kmeans.aic.boot <- lasso.kmeans.aic.bvalue$interest
#}
#if(run.bic==TRUE){
weights <- data.frame(out.kmeans.bic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.kmeans.bic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_kmeans_bic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.kmeans.bic.boot <- lasso.kmeans.bic.bvalue$interest
#}
}
if(run.kquart.aic.bic==TRUE){
## weights are exclusion frequency (designed partitioning-k quartiles)
#if(run.aic==TRUE){
weights <- data.frame(out.kquart.aic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.kquart.aic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_kquart_aic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.kquart.aic.boot <- lasso.kquart.aic.bvalue$interest
#}
#if(run.bic==TRUE){
weights <- data.frame(out.kquart.bic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.kquart.bic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_kquart_bic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.kquart.bic.boot <- lasso.kquart.bic.bvalue$interest
#}
}
if(run.sort.aic.bic==TRUE){
## weights are exclusion frequency (designed partitioning-k quartiles)
#if(run.aic==TRUE){
weights <- data.frame(out.sort.aic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.sort.aic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_sort_aic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.sort.aic.boot <- lasso.sort.aic.bvalue$interest
#}
#if(run.bic==TRUE){
weights <- data.frame(out.sort.bic.boot)
colnames(weights) <- "response"
rownames(weights) <- out.rownames[-1]
lasso.sort.bic.bvalue <- lasso.computations(weights,microbes,phenotypes,g1,plots=FALSE,
file="weight_pval_sort_bic_boot_",
include.diet=include.z,format.data=format.data,
diet.wt=diet.wt,
thresh.q=thresh.q,delta=delta,
std.y=std.y,est.MSE=est.MSE,cv.criterion=cv.criterion)
w.sort.bic.boot <- lasso.sort.bic.bvalue$interest
#}
}
}
return(list("qval"=out.qvalue,"bh.pval"=out.benhoch.pval.adjust, "pval"=out.pvalue, "out.cor"=out.cor, "out.parcor"=out.parcor, "out.benhoch.cor"=out.benhoch.cor, "out.benhoch.parcor"=out.benhoch, "out.w"=out.w, "alpha"=alpha, "alpha.bh"=alpha.bh, "delta"=delta, "cv.delta.w"=mult.delta.w5, "cv.delta.adapt"=mult.delta.w6, "cv.out.w"=mult.cv.delta.out.w5, "cv.out.adapt"=mult.cv.delta.out.w6,
#"out.aic.boot"=out.aic.boot, "out.bic.boot"=out.bic.boot,# "out.fixed.aic.boot"=out.fixed.aic.boot, "out.fixed.bic.boot"=out.fixed.bic.boot,
#"out.kmeans.aic.boot"=out.kmeans.aic.boot, "out.kmeans.bic.boot"=out.kmeans.bic.boot, "out.kquart.aic.boot"=out.kquart.aic.boot, "out.kquart.bic.boot"=out.kquart.bic.boot,
#"out.sort.aic.boot"=out.sort.aic.boot, "out.sort.bic.boot"=out.sort.bic.boot,
"w.aic.boot"=w.aic.boot, "w.bic.boot"=w.bic.boot, "w.kmeans.aic.boot"=w.kmeans.aic.boot, "w.kmeans.bic.boot"=w.kmeans.bic.boot,
"w.kquart.aic.boot"=w.kquart.aic.boot, "w.kquart.bic.boot"=w.kquart.bic.boot, "w.sort.aic.boot"=w.sort.aic.boot, "w.sort.bic.boot"=w.sort.bic.boot))
}
dwlcox1 <- d2wlasso(x,z,y,cox.delta = cox.delta, reg.type = "cox",delta=2, nboot = 5)
dwlcox1$out.w
dwlcox1$out.aic.boot; dwlcox1$w.aic.boot
dwlcox1$w.aic.boot
dwlcox1$w.bic.boot
dwlcox1$w.kmeans.aic.boot
dwlcox1$w.kmeans.bic.boot
dwlcox1$w.kquart.aic.boot
dwlcox1$w.kquart.bic.boot
dwlcox1$w.sort.aic.boot
dwlcox1$w.sort.bic.boot
dwlcox1$out.w
dwlcox1$w.aic.boot
dwlcox1$w.bic.boot
dwlcox1$w.kmeans.aic.boot
dwlcox1$w.kmeans.bic.boot
dwlcox1$w.kquart.aic.boot
dwlcox1$w.kquart.bic.boot
dwlcox1$w.sort.aic.boot
dwlcox1$w.sort.bic.boot
dwlcox1 <- d2wlasso(x,z,y,cox.delta = cox.delta, reg.type = "cox",wt="t_val",delta=2, nboot = 5)
dwlcox1$out.w
dwlcox1$w.aic.boot
dwlcox1$w.bic.boot
dwlcox1$w.kmeans.aic.boot
dwlcox1$w.kmeans.bic.boot
dwlcox1$w.kquart.aic.boot
dwlcox1$w.kquart.bic.boot
dwlcox1$w.sort.aic.boot
dwlcox1$w.sort.bic.boot
library(d2wlasso)
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y = matrix(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 1), 100)
dwl0 <- d2wlasso(x,z,y)
dwl1 <- d2wlasso(x,z,y,delta=2)
dwl2 <- d2wlasso(x,z,y,include.z=FALSE)
dwl3 <- d2wlasso(x,z,y,weight_fn = "sqrt")
dwl4 <- d2wlasso(x,z,y,wt="adapt")
dwl5 <- d2wlasso(x,z,y,wt="t_val")
dwl6 <- d2wlasso(x,z,y,wt="q_parcor")
cbind(dwl1$out.w, dwl2$out.w, dwl3$out.w, dwl4$out.w, dwl5$out.w, dwl6$out.w)
dwlcv0 <- d2wlasso(x,z,y,lasso.delta.cv.mult = TRUE, ncv = 3)
dwlcv1 <- d2wlasso(x,z,y,lasso.delta.cv.mult = TRUE, ncv = 3, delta.cv.seed = 1)
x = matrix(rnorm(100*5, 0, 1),100,5)
z = matrix(rbinom(100, 1, 0.5),100,1)
y <- matrix(exp(z[,1] + 2*x[,1] - 2*x[,2] + rnorm(100, 0, 2)), 100)
cox.delta <- matrix(1,nrow=length(y),ncol=1)
dwlcox1 <- d2wlasso(x,z,y,cox.delta = cox.delta, reg.type = "cox")
dwlcox2 <- d2wlasso(x,z,y,cox.delta = cox.delta, reg.type = "cox", nboot = 50)
dwlcox3 <- d2wlasso(x,z,y,cox.delta = cox.delta, reg.type = "cox", wt="t_val")
dwlcox1$w.aic.boot
dwlcox1$w.bic.boot
dwlcox1$w.sort.bic.boot
dwlcox1$w.sort.aic.boot
dwlcox1$w.kmeans.aic.boot
dwlcoxcv1 <- d2wlasso(x,z,y,cox.delta = cox.delta,reg.type = "cox",lasso.delta.cv.mult = TRUE, ncv = 3, nboot = 50)
